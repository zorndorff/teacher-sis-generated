// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// Asset defines model for Asset.
type Asset struct {
	AssetId     *string `json:"assetId,omitempty"`
	AssetType   *string `json:"assetType,omitempty"`
	Condition   *string `json:"condition,omitempty"`
	Description *string `json:"description,omitempty"`
}

// AttendanceRecord defines model for AttendanceRecord.
type AttendanceRecord struct {
	AttendanceCode     *string `json:"attendanceCode,omitempty"`
	AttendanceRecordId *string `json:"attendanceRecordId,omitempty"`
	Comment            *string `json:"comment,omitempty"`
	StudentId          *string `json:"studentId,omitempty"`
}

// NewAsset defines model for NewAsset.
type NewAsset struct {
	AssetType   *string `json:"assetType,omitempty"`
	Condition   *string `json:"condition,omitempty"`
	Description *string `json:"description,omitempty"`
}

// NewStudent defines model for NewStudent.
type NewStudent struct {
	Demographics *map[string]interface{} `json:"demographics,omitempty"`
	FirstName    *string                 `json:"firstName,omitempty"`
	LastName     *string                 `json:"lastName,omitempty"`
}

// Student defines model for Student.
type Student struct {
	Demographics   *map[string]interface{} `json:"demographics,omitempty"`
	Enrollments    *[]string               `json:"enrollments,omitempty"`
	FirstName      *string                 `json:"firstName,omitempty"`
	GuardianEmails *[]string               `json:"guardianEmails,omitempty"`
	LastName       *string                 `json:"lastName,omitempty"`
	StudentId      *string                 `json:"studentId,omitempty"`
}

// Teacher defines model for Teacher.
type Teacher struct {
	Email     *string   `json:"email,omitempty"`
	FirstName *string   `json:"firstName,omitempty"`
	LastName  *string   `json:"lastName,omitempty"`
	Sections  *[]string `json:"sections,omitempty"`
	TeacherId *string   `json:"teacherId,omitempty"`
}

// PostAssetsJSONRequestBody defines body for PostAssets for application/json ContentType.
type PostAssetsJSONRequestBody = NewAsset

// PostCoursesSectionsSectionIdAttendanceJSONRequestBody defines body for PostCoursesSectionsSectionIdAttendance for application/json ContentType.
type PostCoursesSectionsSectionIdAttendanceJSONRequestBody = AttendanceRecord

// PostStudentsJSONRequestBody defines body for PostStudents for application/json ContentType.
type PostStudentsJSONRequestBody = NewStudent

// PutStudentsStudentIdJSONRequestBody defines body for PutStudentsStudentId for application/json ContentType.
type PutStudentsStudentIdJSONRequestBody = Student

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all assets
	// (GET /assets)
	GetAssets(ctx echo.Context) error
	// Add a new asset
	// (POST /assets)
	PostAssets(ctx echo.Context) error
	// Submit attendance for a section
	// (POST /courses/sections/{sectionId}/attendance)
	PostCoursesSectionsSectionIdAttendance(ctx echo.Context, sectionId string) error
	// List all students
	// (GET /students)
	GetStudents(ctx echo.Context) error
	// Enroll a new student
	// (POST /students)
	PostStudents(ctx echo.Context) error
	// Remove a student from enrollment
	// (DELETE /students/{studentId})
	DeleteStudentsStudentId(ctx echo.Context, studentId string) error
	// Retrieve a student by ID
	// (GET /students/{studentId})
	GetStudentsStudentId(ctx echo.Context, studentId string) error
	// Update a student's information
	// (PUT /students/{studentId})
	PutStudentsStudentId(ctx echo.Context, studentId string) error
	// List all teachers
	// (GET /teachers)
	GetTeachers(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAssets converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAssets(ctx)
	return err
}

// PostAssets converts echo context to params.
func (w *ServerInterfaceWrapper) PostAssets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAssets(ctx)
	return err
}

// PostCoursesSectionsSectionIdAttendance converts echo context to params.
func (w *ServerInterfaceWrapper) PostCoursesSectionsSectionIdAttendance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "sectionId" -------------
	var sectionId string

	err = runtime.BindStyledParameterWithOptions("simple", "sectionId", ctx.Param("sectionId"), &sectionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sectionId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCoursesSectionsSectionIdAttendance(ctx, sectionId)
	return err
}

// GetStudents converts echo context to params.
func (w *ServerInterfaceWrapper) GetStudents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStudents(ctx)
	return err
}

// PostStudents converts echo context to params.
func (w *ServerInterfaceWrapper) PostStudents(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStudents(ctx)
	return err
}

// DeleteStudentsStudentId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteStudentsStudentId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studentId" -------------
	var studentId string

	err = runtime.BindStyledParameterWithOptions("simple", "studentId", ctx.Param("studentId"), &studentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studentId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteStudentsStudentId(ctx, studentId)
	return err
}

// GetStudentsStudentId converts echo context to params.
func (w *ServerInterfaceWrapper) GetStudentsStudentId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studentId" -------------
	var studentId string

	err = runtime.BindStyledParameterWithOptions("simple", "studentId", ctx.Param("studentId"), &studentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studentId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStudentsStudentId(ctx, studentId)
	return err
}

// PutStudentsStudentId converts echo context to params.
func (w *ServerInterfaceWrapper) PutStudentsStudentId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "studentId" -------------
	var studentId string

	err = runtime.BindStyledParameterWithOptions("simple", "studentId", ctx.Param("studentId"), &studentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter studentId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutStudentsStudentId(ctx, studentId)
	return err
}

// GetTeachers converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeachers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTeachers(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/assets", wrapper.GetAssets)
	router.POST(baseURL+"/assets", wrapper.PostAssets)
	router.POST(baseURL+"/courses/sections/:sectionId/attendance", wrapper.PostCoursesSectionsSectionIdAttendance)
	router.GET(baseURL+"/students", wrapper.GetStudents)
	router.POST(baseURL+"/students", wrapper.PostStudents)
	router.DELETE(baseURL+"/students/:studentId", wrapper.DeleteStudentsStudentId)
	router.GET(baseURL+"/students/:studentId", wrapper.GetStudentsStudentId)
	router.PUT(baseURL+"/students/:studentId", wrapper.PutStudentsStudentId)
	router.GET(baseURL+"/teachers", wrapper.GetTeachers)

}

type GetAssetsRequestObject struct {
}

type GetAssetsResponseObject interface {
	VisitGetAssetsResponse(w http.ResponseWriter) error
}

type GetAssets200JSONResponse []Asset

func (response GetAssets200JSONResponse) VisitGetAssetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAssetsRequestObject struct {
	Body *PostAssetsJSONRequestBody
}

type PostAssetsResponseObject interface {
	VisitPostAssetsResponse(w http.ResponseWriter) error
}

type PostAssets201Response struct {
}

func (response PostAssets201Response) VisitPostAssetsResponse(w http.ResponseWriter) error {
	w.WriteHeader(201)
	return nil
}

type PostCoursesSectionsSectionIdAttendanceRequestObject struct {
	SectionId string `json:"sectionId"`
	Body      *PostCoursesSectionsSectionIdAttendanceJSONRequestBody
}

type PostCoursesSectionsSectionIdAttendanceResponseObject interface {
	VisitPostCoursesSectionsSectionIdAttendanceResponse(w http.ResponseWriter) error
}

type PostCoursesSectionsSectionIdAttendance200Response struct {
}

func (response PostCoursesSectionsSectionIdAttendance200Response) VisitPostCoursesSectionsSectionIdAttendanceResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetStudentsRequestObject struct {
}

type GetStudentsResponseObject interface {
	VisitGetStudentsResponse(w http.ResponseWriter) error
}

type GetStudents200JSONResponse []Student

func (response GetStudents200JSONResponse) VisitGetStudentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostStudentsRequestObject struct {
	Body *PostStudentsJSONRequestBody
}

type PostStudentsResponseObject interface {
	VisitPostStudentsResponse(w http.ResponseWriter) error
}

type PostStudents201JSONResponse Student

func (response PostStudents201JSONResponse) VisitPostStudentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteStudentsStudentIdRequestObject struct {
	StudentId string `json:"studentId"`
}

type DeleteStudentsStudentIdResponseObject interface {
	VisitDeleteStudentsStudentIdResponse(w http.ResponseWriter) error
}

type DeleteStudentsStudentId204Response struct {
}

func (response DeleteStudentsStudentId204Response) VisitDeleteStudentsStudentIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetStudentsStudentIdRequestObject struct {
	StudentId string `json:"studentId"`
}

type GetStudentsStudentIdResponseObject interface {
	VisitGetStudentsStudentIdResponse(w http.ResponseWriter) error
}

type GetStudentsStudentId200JSONResponse Student

func (response GetStudentsStudentId200JSONResponse) VisitGetStudentsStudentIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutStudentsStudentIdRequestObject struct {
	StudentId string `json:"studentId"`
	Body      *PutStudentsStudentIdJSONRequestBody
}

type PutStudentsStudentIdResponseObject interface {
	VisitPutStudentsStudentIdResponse(w http.ResponseWriter) error
}

type PutStudentsStudentId200Response struct {
}

func (response PutStudentsStudentId200Response) VisitPutStudentsStudentIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type GetTeachersRequestObject struct {
}

type GetTeachersResponseObject interface {
	VisitGetTeachersResponse(w http.ResponseWriter) error
}

type GetTeachers200JSONResponse []Teacher

func (response GetTeachers200JSONResponse) VisitGetTeachersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all assets
	// (GET /assets)
	GetAssets(ctx context.Context, request GetAssetsRequestObject) (GetAssetsResponseObject, error)
	// Add a new asset
	// (POST /assets)
	PostAssets(ctx context.Context, request PostAssetsRequestObject) (PostAssetsResponseObject, error)
	// Submit attendance for a section
	// (POST /courses/sections/{sectionId}/attendance)
	PostCoursesSectionsSectionIdAttendance(ctx context.Context, request PostCoursesSectionsSectionIdAttendanceRequestObject) (PostCoursesSectionsSectionIdAttendanceResponseObject, error)
	// List all students
	// (GET /students)
	GetStudents(ctx context.Context, request GetStudentsRequestObject) (GetStudentsResponseObject, error)
	// Enroll a new student
	// (POST /students)
	PostStudents(ctx context.Context, request PostStudentsRequestObject) (PostStudentsResponseObject, error)
	// Remove a student from enrollment
	// (DELETE /students/{studentId})
	DeleteStudentsStudentId(ctx context.Context, request DeleteStudentsStudentIdRequestObject) (DeleteStudentsStudentIdResponseObject, error)
	// Retrieve a student by ID
	// (GET /students/{studentId})
	GetStudentsStudentId(ctx context.Context, request GetStudentsStudentIdRequestObject) (GetStudentsStudentIdResponseObject, error)
	// Update a student's information
	// (PUT /students/{studentId})
	PutStudentsStudentId(ctx context.Context, request PutStudentsStudentIdRequestObject) (PutStudentsStudentIdResponseObject, error)
	// List all teachers
	// (GET /teachers)
	GetTeachers(ctx context.Context, request GetTeachersRequestObject) (GetTeachersResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAssets operation middleware
func (sh *strictHandler) GetAssets(ctx echo.Context) error {
	var request GetAssetsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAssets(ctx.Request().Context(), request.(GetAssetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAssets")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAssetsResponseObject); ok {
		return validResponse.VisitGetAssetsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAssets operation middleware
func (sh *strictHandler) PostAssets(ctx echo.Context) error {
	var request PostAssetsRequestObject

	var body PostAssetsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAssets(ctx.Request().Context(), request.(PostAssetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAssets")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAssetsResponseObject); ok {
		return validResponse.VisitPostAssetsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCoursesSectionsSectionIdAttendance operation middleware
func (sh *strictHandler) PostCoursesSectionsSectionIdAttendance(ctx echo.Context, sectionId string) error {
	var request PostCoursesSectionsSectionIdAttendanceRequestObject

	request.SectionId = sectionId

	var body PostCoursesSectionsSectionIdAttendanceJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCoursesSectionsSectionIdAttendance(ctx.Request().Context(), request.(PostCoursesSectionsSectionIdAttendanceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCoursesSectionsSectionIdAttendance")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCoursesSectionsSectionIdAttendanceResponseObject); ok {
		return validResponse.VisitPostCoursesSectionsSectionIdAttendanceResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetStudents operation middleware
func (sh *strictHandler) GetStudents(ctx echo.Context) error {
	var request GetStudentsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStudents(ctx.Request().Context(), request.(GetStudentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStudents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetStudentsResponseObject); ok {
		return validResponse.VisitGetStudentsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostStudents operation middleware
func (sh *strictHandler) PostStudents(ctx echo.Context) error {
	var request PostStudentsRequestObject

	var body PostStudentsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostStudents(ctx.Request().Context(), request.(PostStudentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostStudents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostStudentsResponseObject); ok {
		return validResponse.VisitPostStudentsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteStudentsStudentId operation middleware
func (sh *strictHandler) DeleteStudentsStudentId(ctx echo.Context, studentId string) error {
	var request DeleteStudentsStudentIdRequestObject

	request.StudentId = studentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteStudentsStudentId(ctx.Request().Context(), request.(DeleteStudentsStudentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteStudentsStudentId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteStudentsStudentIdResponseObject); ok {
		return validResponse.VisitDeleteStudentsStudentIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetStudentsStudentId operation middleware
func (sh *strictHandler) GetStudentsStudentId(ctx echo.Context, studentId string) error {
	var request GetStudentsStudentIdRequestObject

	request.StudentId = studentId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStudentsStudentId(ctx.Request().Context(), request.(GetStudentsStudentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStudentsStudentId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetStudentsStudentIdResponseObject); ok {
		return validResponse.VisitGetStudentsStudentIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutStudentsStudentId operation middleware
func (sh *strictHandler) PutStudentsStudentId(ctx echo.Context, studentId string) error {
	var request PutStudentsStudentIdRequestObject

	request.StudentId = studentId

	var body PutStudentsStudentIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutStudentsStudentId(ctx.Request().Context(), request.(PutStudentsStudentIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutStudentsStudentId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutStudentsStudentIdResponseObject); ok {
		return validResponse.VisitPutStudentsStudentIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTeachers operation middleware
func (sh *strictHandler) GetTeachers(ctx echo.Context) error {
	var request GetTeachersRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTeachers(ctx.Request().Context(), request.(GetTeachersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTeachers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTeachersResponseObject); ok {
		return validResponse.VisitGetTeachersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
